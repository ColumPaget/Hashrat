AUTHOR:
	Hashrat and libUseful are (C) 2014 Colum Paget. They are released under the Gnu Public License so you may do anything with them that the GPL allows.

Email: colums.projects@gmail.com
Blog: http://idratherhack.blogspot.com


DISCLAIMER:
  This is free software. It comes with no guarentees and I take no responsiblity if it makes your computer explode or opens a portal to the demon dimensions, or does anything at all.


SYNOPSIS:
	Hashrat is a hash-generation utility that supports the md5, sha1, sha256, sha512, whirlpool, jh-244, jh256, jh-384 and jh-512 hash functions, and also the HMAC versions of those functions. It can output in 'traditional' format (same as md5sum and shasum and the like), or it's own format. Hashes can be output in octal, decimal, hexadecimal, uppercase hexadecimal or base64. It supports directory recursion, hashing entire devices, and generating a hash for an entire directory. It has a 'CGI' mode that can be used as a web-page to lookup hashes. 


CREDITS:  
	Thanks to the people who invented the hash functions!
		MD5: Ronald Rivest
		Whirlpool: Vincent Rijmen, Paulo S. L. M. Barreto
		JH: Hongjun Wu
		SHA: The NSA (thanks, but please stop reading my email. It's kinda creepy.).

		Special thanks to Professor Hongjun Wu for taking the time to confirm that the JH algorithm is free for use in GPL programs.
		

Usage:
    hashrat [options] [path to hash]...

    hashrat -c [options] [input file of hashes]...

Options:
  --help          Print this help
  -help           Print this help
  -?              Print this help
  --version       Print program version
  -version        Print program version
  -md5            Use md5 hash algorithmn
  -sha1           Use sha1 hash algorithmn
  -sha256         Use sha256 hash algorithmn
  -sha512         Use sha512 hash algorithmn
  -whirl          Use whirlpool hash algorithmn
  -whirlpool      Use whirlpool hash algorithmn
  -jh244          Use jh-244 hash algorithmn
  -jh256          Use jh-256 hash algorithmn
  -jh384          Use jh-384 hash algorithmn
  -jh512          Use jh-512 hash algorithmn
  -hmac           HMAC using specified hash algorithm
  -8              Encode with octal instead of hex
  -10             Encode with decimal instead of hex
  -H              Encode with UPPERCASE hexadecimal
  -HEX            Encode with UPPERCASE hexadecimal
  -64             Encode with base65 instead of hex
  -base64         Encode with base65 instead of hex
  -t              Output hashes in traditional md5sum, shaXsum format
  -trad           Output hashes in traditional md5sum, shaXsum format
  -r              Recurse into directories when hashing files
  -f <listfile>   Hash files listed in <listfile>
  -i <pattern>    Only hash items matching <pattern>
  -x <pattern>    Exclude items matching <pattern>
  -c              Check hashes against list from file (or stdin)
  -cf             Check hashes but only show failures
  -strict         Strict mode: when checking, check file mtime, owner, group, and inode as well as it's hash
  -S              Strict mode: when checking, check file mtime, owner, group, and inode as well as it's hash
  -d              dereference (follow) symlinks
  -dirmode        DirMode: Read all files in directory and create one hash for them!
  -devmode        DevMode: read from a file EVEN OF IT'S A DEVNODE
  -fs             Stay one one file system
  -lines          Read lines from stdin and hash each line independantly.
  -rawlines       Read lines from stdin and hash each line independantly, INCLUDING any trailing whitespace. (This is compatible with 'echo text | md5sum')
  -rl             Read lines from stdin and hash each line independantly, INCLUDING any trailing whitespace. (This is compatible with 'echo text | md5sum')
  -cgi            Run in HTTP CGI mode
  -net            Treat 'file' arguments as either ssh or http URLs, and pull files over the network and then hash them (Allows hashing of files on remote machines).
                  URLs are in the format ssh://[username]:[password]@[host]:[port] or http://[username]:[password]@[host]:[port]..
  -idfile <path>  Path to an ssh private key file to use to authenticate INSTEAD OF A PASSWORD when pulling files via ssh.


Hashrat can also detect if it's being run under any of the following names (e.g., via symlinks)

  md5sum          run with '-trad -md5'
  shasum          run with '-trad -sha1'
  sha1sum         run with '-trad -sha1'
  sha256sum       run with '-trad -sha256'
  sha512sum       run with '-trad -sha512'
  jh244sum        run with '-trad -jh244'
  jh256sum        run with '-trad -jh256'
  jh384sum        run with '-trad -jh384'
  jh512sum        run with '-trad -jh512'
  whirlpoolsum    run with '-trad -whirl'
  hashrat.cgi     run in web-enabled 'cgi mode'


USE EXAMPLES:

	hashrat

		Generate an md5 hash of data read from stdin  (default hash type is md5).

	hashrat -jh256

		Generate a jh-256 hash of data read from stdin
		
	hashrat -sha256 -64

		Generate an sha-256 hash of data read from stdin, output with base64 encoding.

	hashrat -sha256 -64 -lines

		Read lines from stdin, and generate an sha-256 with base64 encoding FOR EVERY LINE. This strips any whitespace from the end of the line (including \r and/or \n line terminators). 

	hashrat -md5 -trad -rawlines

		Read lines from stdin, and generate an md5 hash in 'traditional' format for every line INCLUDING TRAILING WHITESPACE. This is compatible with 'echo text | md5sum' where 'text' is one line, as 'echo' adds a newline to the end of the text it outputs.

	hashrat *

		Generate a list of hashes for files in the current directory (default hash type is md5).

	hashrat -r -sha1 * > hashes.sha1

		Generate a list of hashes for files in the current directory, AND ALL SUBDIRECTORIES, using sha1 hashing.

	cat hashes.sha1 > hashrat -c

		Check hashes listed in 'hashes.sha1'

	cat hashes.sha1 > hashrat -c -strict

		Check hashes listed in 'hashes.sha1'. If hashes are NOT in 'traditional' format than the '-strict' flag will cause hashrat to check the files uid, gid, size, mtime and inode and print a failure message if any of those don't match.

	cat hashes.sha1 > hashrat -cf

		Check hashes listed in 'hashes.sha1' but only output failures

	hashrat -devmode -whirlpool -64 /dev/sda1

		Generate a whirlpool hash of the entire device /dev/sda1. Output result in base 64

	hashrat -sha1 -net ssh:user:password@myhost/bin/*

		Generate sha1 hashes of files in /bin/* on the remote machine 'myhost'		

	hashrat -whirlpool -net http://myhost.com/webpage.html

		Generate whirlpool hash for the listed URL. (Note, many webpages have dynamic content that changes every time, so this will only return the same hash over and over if the page is static and doesn't change.


USES FOR HASHRAT

	1) Strong Passwords

	I mostly use hashrat to generate strong passwords for websites. As I always have access to hashrat, I don't have to remember the strong password, as I can always regenerate them with hashrat. So, I remember a handful of moderately decent passwords (i.e. things that I can't find by grepping in the '10,000 most popular passwords' list https://github.com/discourse/discourse/blob/master/lib/common_passwords/10k-common-passwords.txt), and I also remember a 'personal pin'. I then combine the website name, one of my passwords, and my personal pin, into a string and feed them into hashrat:

	echo "facebook.com password 1234" | hashrat -sha1 -64

Obviously, my password isn't 'password' and my pin isn't '1234', but you get the idea. This gives me a 28-character string that should take "8.02 trillion trillion centuries" to crack with a "massive cracking array" according to Steve Gibson's 'Password haystacks' utility, https://www.grc.com/haystack.htm. This is what i then use as my password. Unfortunately some websites won't take a 28-character password, and for these I have to truncate to the appropriate length, but the results are still stronger than anything I could remember, and nothing needs storing on disk (as with password managers). 

There are some dangers to using the 'echo' method shown above if you are on a shared machine, or if someone gets hold of your computer/harddrive. On a shared machine someone could type 'ps ax' to see all commands running, and if they time it right, they might see your command-line with your password in it. If you use a shell (like bash) that will record your typed commands so you can recall them later. Bash stores this information on disk in the file .bash_history, so if you use the 'echo' method shown above your password will be saved on disk. To combat this hashrat has 'line mode'

	hashrat -sha1 -64 -lines

This reads lines from stdin, so type into hashrat and then press 'enter', and you'll be given the hash of the line you typed. By this method your password is neither visible in 'ps ax', nor is ever stored on disk.

'-lines' will produce a different hash  to the 'echo' method listed above, because it strips any trailing whiespace off the lines read. If you want strict compatiblity with 'echo' (by default echo adds a 'newline' to the end of the text to output) then use 'rawlines' mode:

	hashrat -sha1 -64 -rawlines


	2) Watching for file changes

	Like md5sum/shasum etc, hashrat can be used to detect changes in files that might indicate malicious activity. For instance, in order to get early warning of malware like 'cryptolocker' (that encrypts files on a users disk, or on network shares, and then demands a ransom for file recovery) I scatter about the disk a number of 'Canary files' that should not change. I record their hashes and regularly check them. If they change, I know something is going on.


	3) Finding files that match hashes.

	Using the -m flag hashrat can be told to read a range of hashes from stdin, and then search for files matching those hashes. For Example:

		cat APT1-AppendixE-MD5s.txt	| hashrat -r -m /usr

	Will search recursively under /usr for files with hashes matching those in APT1-AppendixE-MD5s.txt. The input on stdin must begin with a hash, anything written after the hash will be treated as a comment to be displayed if a file matching the hash is found.

	Hashtypes other than md5 can be used thusly:

		cat sha1-list.lst | hashrat -r -sha1 -m /usr

	Hashes can also be loaded into a memcached server, so that the same file list can be checked on a number of machines, without needing to store the hashlist on those machines. First we load the hashes:

		cat APT1-AppendixE-MD5s.txt	| hashrat -lm -memcached 192.168.1.5 

	Loads the hashes to a memcached server at 192.168.1.5. We can then search against the memcached server by:

		hashrat -r -m -memcached 192.168.1.5 /usr 


	4) CGI Mode

	If hashrat is run with the -cgi flag, or if it's run with a name of 'hashrat.cgi' (either by renaming the 'hashrat' executable, or via a symbolic link) it will output a webpage that allows users to look up hashes over the web. This allows me to look-up my strong passwords even if I don't have access to a local version of hashrat.
